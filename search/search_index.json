{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pytmac","title":"pytmac","text":"<p>Python based threat modelling as code tool (Python T.M.A.C).</p>"},{"location":"#installation","title":"Installation","text":"<p>pytmac is available via PyPi, and can be installed with pip:</p> <pre><code>pip3 install pytmac\n</code></pre> <p>In order for DFD diagrams to be generated, plantuml must be installed on the system. If it is not installed, pytmac will continue to execute but the output will not include a DFD diagram.</p>"},{"location":"#usage","title":"Usage","text":"<p>Once installed, pytmac can be called from the command line with an array of arguments which are described in the help page:</p> <pre><code>pytmac --help\n</code></pre>"},{"location":"#demonstration","title":"Demonstration","text":"<p>To generate an example report based on some pre-defined resources, run the following command:</p> <pre><code>pytmac --demo\n</code></pre> <p>This will write to a file called <code>report-[today-date].md</code> which can be viewed in a markdown viewer.</p>"},{"location":"#configuration","title":"Configuration","text":""},{"location":"#init-mode","title":"Init mode","text":"<p>pytmac can be run in init mode to generate configuration files using a combination of inputs provided and default project settings. This can be done with the following command:</p> <pre><code>pytmac --init\n</code></pre> <p>Once the initialisation has completed, you should review the generated files and make any changes required (Primary focus should be on the defaults file as this will globally define security settings for all generated resources in your project.</p>"},{"location":"#config-file","title":"Config file","text":"<p>pytmac on launch will look for a file in the current directory named <code>.pytmac</code> as a source of settings. This file can be used to set the following settings:</p> <pre><code>resource_file: \"docs/resources.yaml\"\nconfig_file: \"docs/config.yaml\"\ndefaults_file: \"docs/defaults.yaml\"\n</code></pre> <p>If both a config file value and a manual override is added via the command line, the command line value will take precedence.</p> <p>Eg if you have a .pytmac file with the following:</p> <pre><code>resource_file: \"docs/resources.yaml\"\n</code></pre> <p>and call pytmac with the following:</p> <pre><code>pytmac --resources-file resources.yaml\n</code></pre> <p>the resources.yaml file will be used over the one defined in the .pytmac file.</p>"},{"location":"#resources","title":"Resources","text":"<p>Resources are defined as any asset that is part of the system being modelled under the following categories:</p> <ul> <li>Databases</li> <li>Networks</li> <li>Systems</li> <li>Users</li> </ul> <p>Resources are provided to pytmac in a yaml file, which can be passed with the <code>--resources-file</code> argument. </p> <p>An example of a <code>resources.yaml</code> can be found in the pytmac repository at <code>./docs/resources.yaml</code>.</p> <p>Resource config defines characteristics of a given resource. Default settings for a given resource type can be set in  the resource yaml as follows (following the same format for a resource type).</p> <pre><code>resources:\n  networks:\n    - name: office_network\n    - name: aws_public_subnet\n      - config:\n        is_cloud: true\n</code></pre>"},{"location":"#defaults","title":"Defaults","text":"<p>Defaults are defined as any setting that is common across all resources. These are provided to pytmac in a yaml file, which can be passed with the <code>--defaults-file</code> argument.</p> <p>An example of a <code>defaults.yaml</code> can be found in the pytmac repository at <code>./docs/defaults.yaml</code>.</p> <p>Defaults can be overridden by resource config, and are applied to all resources unless overridden.</p>"},{"location":"#security-checks","title":"Security Checks","text":"<p>Security checks have been included to cover use cases for the Owasp top 10, however you may want to extend pytmac with custom checks can be written and added to <code>./docs/security_checks.yaml</code>. These files should be written as below, the  checks are iterated over and executed individually, all fields are required.</p> <p>Severity should be used as a combination of Risk vs Likelihood, any security findings are prioritised by severity in the report output. </p> <pre><code>user_owned_device:\n  name: Non company device used\n  description: Checks for users with company_user true and company_device false.\n  remediation: Understand and remediate or document known exception.\n  severity: 3\n  resource_scope:\n    - users\n  check_query:\n    - resources[resource][\"company_user\"] and not resources[resource][\"company_device\"]\n</code></pre>"},{"location":"#outputs","title":"Outputs","text":"<p>The primary output of pytmac is a generated Markdown report, including a DFD (Data Flow Diagram) generated from the  provided resources, and a programmatically generated list of security concerns using fields from the configuration (including overrides).</p> <p>Additionally, a yaml report is generated of all resources and their config - To ease reviewing the findings during a  threat modelling session.</p>"},{"location":"#release-details","title":"Release Details","text":"<p>This project uses semantic versioning for releases, which are determined and managed by python-semantic-release. </p> <p>Python-semantic-release relies on conventional commits being used for all commit messages to determine the next version number / semantic release type (major/minor/patch).</p> <p>Once the new version number has been determined, a new release is created on github, and the new version is published to PyPi.</p>"},{"location":"#gpush","title":"gpush","text":"<p>You can use my other project gpush to ensure you always push commits with the correct format for this project, otherwise, details on commit message structure can be found on the conventional commits website.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation is generated using mkdocs, and is hosted on github pages. To generate the documentation locally, run the following command:</p> <p>NOTE: Before running for the first time you will need to ensure that you have the required packages installed, you can do this as:</p> <pre><code>pip3 install -r requirements.docs.txt\n</code></pre> <p>Now run the following make command to generate and serve the docs</p> <pre><code>make mkdocs\n</code></pre> <p>This will generate a new copy of the documentation in the <code>./docs</code> directory and serve it on <code>http://localhost:8000</code>.</p> <p>NOTE: This action will also run during CI to ensure the documentation is up-to-date.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>When contributing to this repository, please first discuss the change you wish to make via communication with the owners of this repository via a logged issue before making a change.</p> <p>Please note we have a code of conduct, please follow it in all your interactions with the project.</p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a branch from the reported issue that you are working on (To ensure the two are linked)</li> <li>Ensure code is well tested and documented</li> <li>Ensure code passes all tests</li> <li>Request a review from the project owners</li> </ol>"},{"location":"pytmac/","title":"Pytmac","text":""},{"location":"pytmac/#main","title":"main","text":"<p>source</p> <pre><code>.main(\n   resources_yaml, config_yaml, defaults_yaml, security_checks_yaml, output_dir,\n   swagger_json = ''\n)\n</code></pre> <p>Primary function used to open up provided config and resource files, generating DFD and output.</p> <p>Args</p> <ul> <li>resources_yaml  : The resources yaml file.</li> <li>config_yaml  : The config yaml file.</li> <li>defaults_yaml  : The defaults yaml file.</li> <li>security_checks_yaml  : The security checks yaml file.</li> <li>output_dir  : The output directory.</li> <li>swagger_json  : The swagger json file (Default value = \"\").</li> </ul> <p>Returns</p> <ul> <li>bool  : The return value. True for success, False otherwise.</li> </ul>"},{"location":"bin/get_config/","title":"Get config","text":""},{"location":"bin/get_config/#resources","title":"resources","text":"<p>source</p> <pre><code>.resources(\n   file\n)\n</code></pre> <p>Return a list of resources to be included in the package.</p> <p>Args</p> <ul> <li>file  : File to load resources from</li> </ul> <p>Returns</p> <p>List of resources</p> <p>Raises</p> <ul> <li>FileNotFoundError  : If file is not found</li> <li>YAMLError  : If file is not valid YAML</li> </ul>"},{"location":"bin/get_config/#config","title":"config","text":"<p>source</p> <pre><code>.config(\n   file\n)\n</code></pre> <p>Return a list of config to be included in the package.</p> <p>Args</p> <ul> <li>file  : File to load resources from</li> </ul> <p>Returns</p> <p>List of resources</p> <p>Raises</p> <ul> <li>FileNotFoundError  : If file is not found</li> <li>YAMLError  : If file is not valid YAML</li> </ul>"},{"location":"bin/get_config/#defaults","title":"defaults","text":"<p>source</p> <pre><code>.defaults(\n   file\n)\n</code></pre> <p>Return a list of defaults to be included in the package.</p> <p>Args</p> <ul> <li>file  : File to load resources from</li> </ul> <p>Returns</p> <p>List of resources</p> <p>Raises</p> <ul> <li>FileNotFoundError  : If file is not found</li> <li>YAMLError  : If file is not valid YAML</li> </ul>"},{"location":"bin/get_config/#security_checks","title":"security_checks","text":"<p>source</p> <pre><code>.security_checks(\n   file\n)\n</code></pre> <p>Return a list of security_checks to be included in the package.</p> <p>Args</p> <ul> <li>file  : File to load resources from</li> </ul> <p>Returns</p> <p>List of resources</p> <p>Raises</p> <ul> <li>FileNotFoundError  : If file is not found</li> <li>YAMLError  : If file is not valid YAML</li> </ul>"},{"location":"bin/get_config/#swagger","title":"swagger","text":"<p>source</p> <pre><code>.swagger(\n   file\n)\n</code></pre> <p>Get and return swagger file contents.</p> <p>Args</p> <ul> <li>file  : File to load resources from</li> </ul> <p>Returns</p> <p>List of resources</p> <p>Raises</p> <ul> <li>FileNotFoundError  : If file is not found</li> <li>Exception  : If file is not valid JSON</li> </ul>"},{"location":"bin/get_config/#settings","title":"settings","text":"<p>source</p> <pre><code>.settings()\n</code></pre> <p>Get and return settings file contents from .pytmac file.</p> <p>Returns</p> <p>settings file contents</p> <p>Raises</p> <ul> <li>FileNotFoundError  : If file is not found</li> <li>YAMLError  : If file is not valid YAML</li> </ul>"},{"location":"bin/init/","title":"Init","text":""},{"location":"bin/init/#get_inputs","title":"get_inputs","text":"<p>source</p> <pre><code>.get_inputs()\n</code></pre> <p>Get user input for project configuration.</p> <p>Returns</p> <p>Dictionary with user input</p> <p>Raises</p> <ul> <li>KeyboardInterrupt  : if user cancels input</li> </ul>"},{"location":"bin/init/#create_directory","title":"create_directory","text":"<p>source</p> <pre><code>.create_directory(\n   name\n)\n</code></pre> <p>Create a directory if it does not exist.</p> <p>Args</p> <ul> <li>name  : Name of directory to create</li> </ul> <p>Returns</p> <p>True if directory was created, False if it already exists</p> <p>Raises</p> <ul> <li>OSError  : if directory cannot be created</li> </ul>"},{"location":"bin/init/#create_config_file","title":"create_config_file","text":"<p>source</p> <pre><code>.create_config_file(\n   project_config\n)\n</code></pre> <p>Create a config file for the project with user provided values.</p> <p>Args</p> <ul> <li>project_config  : User provided input for project.</li> </ul> <p>Returns</p> <p>True if config file was created</p> <p>Raises</p> <ul> <li>OSError  : if config file cannot be loaded</li> <li>YAMLError  : if values cannot be updated</li> <li>KeyError  : if config file cannot be created</li> </ul>"},{"location":"bin/init/#create_defaults_file","title":"create_defaults_file","text":"<p>source</p> <pre><code>.create_defaults_file(\n   project_config\n)\n</code></pre> <p>Create a defaults file for the project.</p> <p>Args</p> <ul> <li>project_config  : User provided input for project.</li> </ul> <p>Returns</p> <p>True if defaults file was created</p> <p>Raises</p> <ul> <li>OSError  : if defaults file cannot be loaded</li> <li>YAMLError  : if values cannot be updated</li> </ul>"},{"location":"bin/init/#return_summary","title":"return_summary","text":"<p>source</p> <pre><code>.return_summary(\n   project_config\n)\n</code></pre> <p>Return a summary of the project configuration.</p> <p>Args</p> <ul> <li>project_config  : User provided input for project.</li> </ul> <p>Returns</p> <p>True if summary was returned</p>"},{"location":"bin/init/#create_resources_file","title":"create_resources_file","text":"<p>source</p> <pre><code>.create_resources_file(\n   project_config, all_resources\n)\n</code></pre> <p>Create a resources file for the project.</p> <p>Args</p> <ul> <li>project_config  : User provided input for project.</li> <li>all_resources  : json file with all resources</li> </ul> <p>Returns</p> <p>True if resources file was created</p> <p>Raises</p> <ul> <li>OSError  : if resources file cannot be loaded</li> <li>YAMLError  : if values cannot be updated</li> </ul>"},{"location":"bin/init/#get_networks","title":"get_networks","text":"<p>source</p> <pre><code>.get_networks()\n</code></pre> <p>Get networks for project configuration.</p> <p>Returns</p> <p>List of networks</p>"},{"location":"bin/init/#get_users","title":"get_users","text":"<p>source</p> <pre><code>.get_users(\n   network, users\n)\n</code></pre> <p>Get users for project configuration.</p> <p>Args</p> <ul> <li>network  : Name of network</li> <li>users  : List of users already added</li> </ul> <p>Returns</p> <p>List of users</p>"},{"location":"bin/init/#get_databases","title":"get_databases","text":"<p>source</p> <pre><code>.get_databases(\n   network, databases\n)\n</code></pre> <p>Get databases for project configuration.</p> <p>Args</p> <ul> <li>network  : Name of network</li> <li>databases  : List of databases already added</li> </ul> <p>Returns</p> <p>list of databases</p>"},{"location":"bin/init/#get_systems","title":"get_systems","text":"<p>source</p> <pre><code>.get_systems(\n   network, systems\n)\n</code></pre> <p>Get systems for project configuration.</p> <p>Args</p> <ul> <li>network  : Name of network</li> <li>systems  : List of systems already added</li> </ul> <p>Returns</p> <p>list of systems</p>"},{"location":"bin/init/#get_resource_names","title":"get_resource_names","text":"<p>source</p> <pre><code>.get_resource_names(\n   all_resources\n)\n</code></pre> <p>Get all resource names from all_resources.</p> <p>Args</p> <ul> <li>all_resources  : json file with all resources</li> </ul> <p>Returns</p> <p>List of resource names</p>"},{"location":"bin/init/#get_links","title":"get_links","text":"<p>source</p> <pre><code>.get_links(\n   all_resource_names\n)\n</code></pre> <p>Get links for project configuration.</p> <p>Args</p> <ul> <li>all_resource_names  : List of all resource names</li> </ul> <p>Returns</p> <p>List of links</p>"},{"location":"bin/init/#create_settings_file","title":"create_settings_file","text":"<p>source</p> <pre><code>.create_settings_file(\n   project_config\n)\n</code></pre> <p>Create settings file for project.</p> <p>Args</p> <ul> <li>project_config  : Project configuration</li> </ul> <p>Returns</p> <p>True if successful, False otherwise</p> <p>Raises</p> <ul> <li>OSError  : If unable to create settings file</li> </ul>"},{"location":"bin/input_validator/","title":"Input validator","text":""},{"location":"bin/input_validator/#config","title":"config","text":"<p>source</p> <pre><code>.config(\n   config_json\n)\n</code></pre> <p>Validate required fields in config.json.</p> <p>Args</p> <ul> <li>config_json  : Json structure containing the app running config</li> </ul> <p>Returns</p> <p>True/False</p>"},{"location":"bin/input_validator/#resources","title":"resources","text":"<p>source</p> <pre><code>.resources(\n   resources_json\n)\n</code></pre> <p>Validate required fields in resources.json.</p> <p>Args</p> <ul> <li>resources_json  : Json structure containing the app resources</li> </ul> <p>Returns</p> <p>True/False</p>"},{"location":"bin/input_validator/#defaults","title":"defaults","text":"<p>source</p> <pre><code>.defaults(\n   defaults_json\n)\n</code></pre> <p>Validate required fields set in defaults.json.</p> <p>Args</p> <ul> <li>defaults_json  : Json structure containing resource defaults</li> </ul> <p>Returns</p> <ul> <li>bool  : True/False</li> </ul>"},{"location":"bin/input_validator/#swagger","title":"swagger","text":"<p>source</p> <pre><code>.swagger(\n   swagger_json\n)\n</code></pre> <p>Validate required fields set in swagger.json (If ENABLE_SWAGGER is set to True).</p> <p>Args</p> <ul> <li>swagger_json  : Json structure containing swagger file contents</li> </ul> <p>Returns</p> <p>True/False</p>"},{"location":"bin/resource_validator/","title":"Resource validator","text":""},{"location":"bin/resource_validator/#main","title":"main","text":"<p>source</p> <pre><code>.main(\n   security_checks_yaml, output_json_report\n)\n</code></pre> <p>Collect responses from required security scans and return.</p> <p>Args</p> <ul> <li>security_checks_yaml  : A json document containing all security checks to be run.</li> <li>output_json_report  : A json document containing all resources and configuration settings</li> </ul> <p>Returns</p> <p>List of insecure resources.</p>"},{"location":"bin/resource_validator/#do_check","title":"do_check","text":"<p>source</p> <pre><code>.do_check(\n   output_json_report, check_details\n)\n</code></pre> <p>Look up a check type in security_checks.json and checks resources using a given function.</p> <p>Insecure resources are returned in the format:</p> <p>[{ \"name\": [The name of the check], \"resource\": [List of non-compliant resources], \"description\": [Description of what the check does], \"check_query\": [The query that returns True to generate this vulnerability type], \"remediation\": [Steps that should be taken to remediate the concern], \"severity\": [1-4 score on the impact of the insecurity]</p> <p>}]</p> <p>Args</p> <ul> <li>output_json_report  : The json report of resources and configuration</li> <li>check_details  : A json containing the details for the check to run.</li> </ul> <p>Returns</p> <p>list(dict)</p>"},{"location":"scripts/generate_docs/","title":"Generate docs","text":""},{"location":"scripts/generate_docs/#get_mkgendocs_config","title":"get_mkgendocs_config","text":"<p>source</p> <pre><code>.get_mkgendocs_config()\n</code></pre> <p>Get the mkgendocs configuration file</p> <p>Returns</p> <p>mkgendocs configuration</p>"},{"location":"scripts/generate_docs/#get_python_files","title":"get_python_files","text":"<p>source</p> <pre><code>.get_python_files(\n   directory\n)\n</code></pre> <p>Function to get a list of python files in a directory.</p> <p>Args</p> <ul> <li>directory  : Directory to search</li> </ul> <p>Returns</p> <p>List of python files</p>"},{"location":"scripts/generate_docs/#get_file_functions","title":"get_file_functions","text":"<p>source</p> <pre><code>.get_file_functions(\n   filename\n)\n</code></pre> <p>Get the functions in a file</p> <p>Args</p> <ul> <li>filename  : The name of the file to parse for functions.</li> </ul> <p>Returns</p> <p>List of functions</p>"},{"location":"scripts/generate_docs/#main","title":"main","text":"<p>source</p> <pre><code>.main()\n</code></pre> <p>Main function</p>"}]}